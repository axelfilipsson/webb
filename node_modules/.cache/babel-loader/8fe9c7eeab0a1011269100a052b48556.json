{"ast":null,"code":"import { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n    this.isLineGeometry = true;\n    this.type = 'LineGeometry';\n  }\n\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n\n    super.setPositions(points);\n    return this;\n  }\n\n  setColors(array) {\n    // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n    const length = array.length - 3;\n    const colors = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      colors[2 * i] = array[i];\n      colors[2 * i + 1] = array[i + 1];\n      colors[2 * i + 2] = array[i + 2];\n      colors[2 * i + 3] = array[i + 3];\n      colors[2 * i + 4] = array[i + 4];\n      colors[2 * i + 5] = array[i + 5];\n    }\n\n    super.setColors(colors);\n    return this;\n  }\n\n  fromLine(line) {\n    const geometry = line.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n\n}\n\nexport { LineGeometry };","map":{"version":3,"sources":["/Users/axel/programmering/axel-filipsson-website/node_modules/three/examples/jsm/lines/LineGeometry.js"],"names":["LineSegmentsGeometry","LineGeometry","constructor","isLineGeometry","type","setPositions","array","length","points","Float32Array","i","setColors","colors","fromLine","line","geometry","attributes","position"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,kCAArC;;AAEA,MAAMC,YAAN,SAA2BD,oBAA3B,CAAgD;AAE/CE,EAAAA,WAAW,GAAG;AAEb;AAEA,SAAKC,cAAL,GAAsB,IAAtB;AAEA,SAAKC,IAAL,GAAY,cAAZ;AAEA;;AAEDC,EAAAA,YAAY,CAAEC,KAAF,EAAU;AAErB;AAEA,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,GAAe,CAA9B;AACA,UAAMC,MAAM,GAAG,IAAIC,YAAJ,CAAkB,IAAIF,MAAtB,CAAf;;AAEA,SAAM,IAAIG,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,MAArB,EAA6BG,CAAC,IAAI,CAAlC,EAAsC;AAErCF,MAAAA,MAAM,CAAE,IAAIE,CAAN,CAAN,GAAkBJ,KAAK,CAAEI,CAAF,CAAvB;AACAF,MAAAA,MAAM,CAAE,IAAIE,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;AACAF,MAAAA,MAAM,CAAE,IAAIE,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;AAEAF,MAAAA,MAAM,CAAE,IAAIE,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;AACAF,MAAAA,MAAM,CAAE,IAAIE,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;AACAF,MAAAA,MAAM,CAAE,IAAIE,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;AAEA;;AAED,UAAML,YAAN,CAAoBG,MAApB;AAEA,WAAO,IAAP;AAEA;;AAEDG,EAAAA,SAAS,CAAEL,KAAF,EAAU;AAElB;AAEA,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,GAAe,CAA9B;AACA,UAAMK,MAAM,GAAG,IAAIH,YAAJ,CAAkB,IAAIF,MAAtB,CAAf;;AAEA,SAAM,IAAIG,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,MAArB,EAA6BG,CAAC,IAAI,CAAlC,EAAsC;AAErCE,MAAAA,MAAM,CAAE,IAAIF,CAAN,CAAN,GAAkBJ,KAAK,CAAEI,CAAF,CAAvB;AACAE,MAAAA,MAAM,CAAE,IAAIF,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;AACAE,MAAAA,MAAM,CAAE,IAAIF,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;AAEAE,MAAAA,MAAM,CAAE,IAAIF,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;AACAE,MAAAA,MAAM,CAAE,IAAIF,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;AACAE,MAAAA,MAAM,CAAE,IAAIF,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;AAEA;;AAED,UAAMC,SAAN,CAAiBC,MAAjB;AAEA,WAAO,IAAP;AAEA;;AAEDC,EAAAA,QAAQ,CAAEC,IAAF,EAAS;AAEhB,UAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB;AAEA,SAAKV,YAAL,CAAmBU,QAAQ,CAACC,UAAT,CAAoBC,QAApB,CAA6BX,KAAhD,EAJgB,CAIyC;AAEzD;;AAEA,WAAO,IAAP;AAEA;;AAxE8C;;AA4EhD,SAASL,YAAT","sourcesContent":["import { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isLineGeometry = true;\n\n\t\tthis.type = 'LineGeometry';\n\n\t}\n\n\tsetPositions( array ) {\n\n\t\t// converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n\n\t\tconst length = array.length - 3;\n\t\tconst points = new Float32Array( 2 * length );\n\n\t\tfor ( let i = 0; i < length; i += 3 ) {\n\n\t\t\tpoints[ 2 * i ] = array[ i ];\n\t\t\tpoints[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\tpoints[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\tpoints[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\tpoints[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\tpoints[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t}\n\n\t\tsuper.setPositions( points );\n\n\t\treturn this;\n\n\t}\n\n\tsetColors( array ) {\n\n\t\t// converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n\n\t\tconst length = array.length - 3;\n\t\tconst colors = new Float32Array( 2 * length );\n\n\t\tfor ( let i = 0; i < length; i += 3 ) {\n\n\t\t\tcolors[ 2 * i ] = array[ i ];\n\t\t\tcolors[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\tcolors[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\tcolors[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\tcolors[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\tcolors[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t}\n\n\t\tsuper.setColors( colors );\n\n\t\treturn this;\n\n\t}\n\n\tfromLine( line ) {\n\n\t\tconst geometry = line.geometry;\n\n\t\tthis.setPositions( geometry.attributes.position.array ); // assumes non-indexed\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { LineGeometry };\n"]},"metadata":{},"sourceType":"module"}